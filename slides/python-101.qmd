---
title: Python 101
subtitle: Introducción y configuración del entorno de trabajo
date: last-modified
author:
  - name: Francisco Palm
    orcid: 0000-0002-1293-0868
    email: fpalm@qu4nt.com
    affiliations: qu4nt, activistasxsl
format:
  clean-revealjs
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
lang: es
logo: images/qu4nt-logo.png
---

## Contenido

\

1.  Instalación y uso de UV para entornos virtuales
2.  Configuración en VS Code
3.  IPython e IPykernel en entornos virtuales
4.  Panorama actual de Python
5.  Introspección del lenguaje
6.  Documentación integrada y tipos de datos
7.  Uso del módulo pdb para depuración

------------------------------------------------------------------------

## ¿Qué es `uv`?  

\

- Herramienta para la gestión de proyectos en Python: dependencias, entornos virtuales, paquetes y aplicaciones.
- Desarrollada por **Astral** (creadores de `ruff`)  
- Implementada en **Rust** → Extremadamente rápida y eficiente  
- Alternativa moderna a `pip`, `pip-tools`, `pipx`, `poetry`, `pyenv`, `twine`, `virtualenv`, y más...

## Instalación

\

<https://docs.astral.sh/uv/getting-started/installation/>

**Validación:**

``` bash
uv --version
# uv 0.8.11 (f892276ac 2025-08-14)
```

------------------------------------------------------------------------

## Ventajas de UV sobre venv tradicional

\

1.  **Velocidad:** Hasta 10x más rápido al crear entornos
2.  **Compatibilidad:** Reemplaza a heramientas ya existentes
3.  **Funcionalidad integrada:** Incluye instalador de paquetes y de distintas versiones del propio Python
4.  **Resolución de dependencias:** Más rápida y confiable

## Ejemplo de flujo de trabajo

\

Moverse al directorio del proyecto

**Inicialización**

``` bash
uv init . # Inicializa un proyecto en la carpeta actual
uv venv # Inicializa un entorno en la carpeta actual
```

**Uso**

``` bash
source .venv/bin/activate  # Activación
uv add numpy pandas  # Instalación rápida
```

<https://docs.astral.sh/uv/guides/projects/>

------------------------------------------------------------------------

## Instalación de vsCode

\

Entorno de desarrollo integrado extensible, multiplataforma y multilemguaje.

- Sitio Oficial de Microsoft <https://code.visualstudio.com>
- Versión sin telemetría <https://vscodium.com>

En cualquiera de los dos sitios descarga los instaladores para tu sistema operativo.

O utiliza los gestores de paquetes de tu sistema operativo, la [tienda de aplicaciones de Microsoft](https://apps.microsoft.com/detail/xp9khm4bk9fz7q), o [brew para macOS](https://formulae.brew.sh/cask/visual-studio-code).

## Instalar extensiones para Python

\

Ver:
<https://code.visualstudio.com/docs/python/python-quick-start>

**Configuración del entorno virtual**

- Pasos para configurar el intérprete del entorno virtual:

1.  Abrir la carpeta del proyecto en vsCode 
2.  Crear o abrir un archivo Python (`.py`)
3.  Presionar `Ctrl+Shift+P` (`Command+Shift+P` en Mac)
4.  Buscar *Python: Select Interpreter* o *Seleccionar intérprete*
5.  Seleccionar el Python del `.venv` en la carpeta del proyecto.

Ver:
<https://code.visualstudio.com/docs/python/environments>

## Verificación

- Al abrir terminal integrada, debería aparecer una indicador en el apuntador del terminal, por ejemplo `(nombre-proyecto)`

Si mi proyecto se llama `intro-ml-python`:

En bash

```bash
(intro-ml-python) [mapologo@muta intro-ml-python]$ 
```

Esto varía según la línea de comandos, personalización y sistema operativo.

\

- Al ejecutar `import sys; print(sys.executable)` debe apuntar al python de `.venv` en la carpeta del proyecto. 

------------------------------------------------------------------------

## Instalar IPykernel en el entorno virtual

\

Si intentamos ejecutar códgo de manera interactiva en Python, vsCode nos pedirá instalar ipykernel. ipykernel es una dependencia de `ipython` y `jupyterlab`.

Puedes darle un vistazo en:

<https://docs.jupyter.org/en/latest/>

De todas maneras, estaremos mostrando su uso a lo largo del curso.

## ¿Por qué instalar ipykernel en el entorno virtual?

\

1.  **Uso de las herramientas interactivas**: nos permite correr código paso a paso en modo interactivo y ejecutar cuadernos de jupyter desde vsCode (Esto requiere que instalemos la [extensión Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter))
2.  **Consistencia:** Los notebooks|cuadernos de Jupyter usan las mismas dependencias que tu proyecto
3.  **Aislamiento:** Evita conflictos con paquetes globales
4.  **Reproducibilidad:** Garantiza que otros puedan ejecutar tu notebook con las mismas versiones

## Instalación de ipykernel

\

Desde la línea de comandos

``` bash
uv pip install ipykernel
```

Alternativa, si queremos que forme parte de nuestro entorno

``` bash
uv add --dev ipykernel
```

También podemos instalar `jupyterlab` del cual `ipykernel` es una dependencia.

## ¿Qué es IPython | Jupyter?

**IPython:** Intérprete interactivo mejorado para Python en línea de comandos.

**Jupyter:** Es una interfaz web que se desarrolló a partir de `IPython`

**Instalación:**

``` bash
uv pip install ipython jupyterlab
```

**Características principales:**

- Autocompletado con TAB
- Sintaxis coloreada
- ? para ayuda rápida
- ! para comandos del sistema
- Historial de comandos mejorado


## Ejemplos de uso:

IPython desde el terminal

```bash
$ ipython
Python 3.13.7 (main, Aug 15 2025, 12:34:02) [GCC 15.2.1 20250813]
Type 'copyright', 'credits' or 'license' for more information
IPython 8.32.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import numpy as np

In [2]: np.random.rand?  # Muestra ayuda inmediata
```

Ejemplos de uso de Jupyter dentro de vsCode:

<https://code.visualstudio.com/docs/python/jupyter-support-py>

------------------------------------------------------------------------

## Uso de IPython/Juyter en el Entorno Virtual

**Después de la configuración:**

1.  Abrir un archivo Jupyter Notebook/Lab extensión `.ipynb`.
2.  Seleccionar el kernel correspondiente al entorno (.venv)
3.  Verificar que está usando el intérprete correcto:

```python
import sys
print(sys.executable)  # Debe mostrar la ruta a .venv
```

> Si, ya lo habíamos visto antes, pero esto es para validar que usamos el python correcto en el intérprete interactivo, que puede ser distinto del intérprete del proyecto.

------------------------------------------------------------------------

## Flujo de Trabajo Integrado

1.  Crear entorno con UV

    ``` bash
    uv venv
    ```

    Si quiero iniciar un proyecto


    ``` bash
    uv init .
    ```

2.  Activar entorno

    ``` bash
    source .venv/bin/activate
    ```

3.  Instalar dependencias

    ``` bash
    uv pip install scikit-learn ipykernel
    ```

4.  Si quiero añadirlas al proyecto

    ``` bash
    uv add scikit-learn
    uv add --dev ipykernel
    ```

# Introducción a Python

## ¿Por qué Python hoy?

\

-   **Lenguaje #1** en popularidad ([Índice TIOBE](https://www.tiobe.com/tiobe-index/), [StackOverflow Survey 2024](https://survey.stackoverflow.co/2024/technology))
-   **Crecimiento sostenido**: +22% en adopción empresarial (2022-2023)
-   **Ecosistema único**: 600,000+ paquetes en PyPI
-   **Revolución IA/ML**: Bibliotecas como TensorFlow y PyTorch lo eligieron

::: r-fit-text
**"Python es el segundo mejor lenguaje para todo"**\
*– Peter Norvig (Director de Investigación de Google)*
:::

------------------------------------------------------------------------

## Historia: De hobby a fenómeno global

**1989** - Guido van Rossum comienza el proyecto como sucesor de ABC\
**1991** - Primera versión pública (0.9.0)\
**2000** - Python 2.0 con recolector de basura\
**2008** - Python 3.0 (cambio importante no retrocompatible)\
**2018** - Guido se retira como "Benevolent Dictator for Life"\
**2020** - Fin de soporte para Python 2.7

![Línea de tiempo de Python](images/python-timeline.jpg){.r-stretch}

------------------------------------------------------------------------

## Filosofía Pythonica

\

**El Zen de Python** (import this)

``` python
>>> import this
Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Readability counts.
...
```

------------------------------------------------------------------------

## Pilares de la filosofía Python

\

1.  **Legibilidad ante todo**\
    (Sintaxis clara, indentación significativa)
2.  **Baterías incluidas**\
    (Biblioteca estándar robusta)
3.  **Multi-paradigma**\
    (OOP, funcional, procedural)
4.  **Comunidad inclusiva**\
    (Código de conducta, PSF)
5.  **Interoperabilidad**\
    (C/C++, Java, .NET)

------------------------------------------------------------------------

## Python en 2025: Más relevante que nunca

\

| Área | Ejemplos | Impacto |
|------------------|-----------------------------|-------------------------|
| Ciencia Datos | Pandas, NumPy | 85% de analistas lo usan |
| IA/ML | Scikit-learn, PyTorch | Frameworks líderes |
| Web | Django, FastAPI | 60% de backends nuevos |
| Automatización | Scripting, DevOps | Estandar en CI/CD |
| Educación | Primer lenguaje en universidades | 70% de cursos introductorios |

------------------------------------------------------------------------

## Futuro de Python

\

-   **Rendimiento**: Mejoras con Python 3.11+ (50% más rápido), Python 3.13 GIL opcional
-   **Tipado**: Soporte gradual para tipos estáticos: [mypy](https://mypy-lang.org/), [pyright](https://microsoft.github.io/pyright), [ty](https://docs.astral.sh/ty/)
-   **WebAssembly**: [Pyodide](https://pyodide.org) para ejecución en navegadores
-   **IA Generativa**: Bibliotecas como LangChain y transformers

------------------------------------------------------------------------

## Introspección del Lenguaje

\

Capacidad de examinar objetos en tiempo de ejecución para conocer sus propiedades, métodos y estructura.

**Ejemplos comunes:**

``` python
# Conocer tipo de un objeto
type(5)  # <class 'int'>

# Listar atributos/métodos
dir(str)  # Muestra todos los métodos de strings

# Ver documentación
help(str.upper)  # Muestra ayuda del método upper
```

------------------------------------------------------------------------

## Herramientas de Introspección

\

-   `type()`: Devuelve el tipo de un objeto
-   `dir()`: Lista atributos y métodos disponibles
-   `help()`: Muestra documentación integrada
-   `hasattr()`: Verifica si un objeto tiene un atributo
-   `getattr()`: Obtiene un atributo de un objeto

``` python
cadena = "Hola"
if hasattr(cadena, 'upper'):
    print(getattr(cadena, 'upper')())  # HOLA
```

------------------------------------------------------------------------

## Documentación Integrada

\

Python incluye documentación accesible directamente desde el intérprete:

``` python
help(print)  # Muestra ayuda de la función print

print.__doc__  # Accede al docstring directamente

# Para módulos
import math
help(math)
```

## Docstrings

\

Cadenas de documentación que definen el propósito de funciones/clases.

``` python
def suma(a, b):
    """Suma dos números y devuelve el resultado"""
    return a + b
```

Una vez la función es interpretada, la documentación queda disponible dentro del entorno. Se utiliza para generar documentación integrada y contextual.

## Tipos de Datos

\

**Tipos básicos:**

-   `int`: Enteros (`5`, `-3`, `42`)
-   `float`: Punto flotante (`3.14`, `-0.001`)
-   `str`: Cadenas (`"Hola"`, `'Python'`)
-   `bool`: Booleanos (`True`, `False`)
-   `list`: Listas `[1, 2, 3]`
-   `dict`: Diccionarios `{"clave": valor}`

## Expresiones

\

Combinaciones de valores/variables/operadores que producen un resultado.

Las expresiones son de distinto tipo dependiendo del tipo de valor que devuelven:

```python
5 + 3 * 2  # Expresión aritmética
edad >= 18 # Expresión lógica
nombre if edad >= 18 else "menor"  # Expresión condicional
```

------------------------------------------------------------------------

## Depuración con pdb

**Módulo pdb:** Depurador integrado en Python.

**Formas de iniciar:**

1.  Al principio de un script:

``` python
import pdb; pdb.set_trace()
```

En cualquier parte del código

``` python
breakpoint()
```

2.  Desde línea de comandos:

``` bash
python -m pdb script.py
```

## Comandos básicos de pdb

\

- `l` (list): muestra código alrededor
- `n` (next): siguiente línea
- `s` (step): entra en función
- `c` (continue): continúa ejecución
- `p` (print): imprime variable
- `q` (quit): sale del depurador

------------------------------------------------------------------------

## Ejemplo de Depuración

\

``` python
# ejemplo.py
def factorial(n):
    import pdb; pdb.set_trace()
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

print(factorial(3))
```

**Sesión de depuración típica:**

```bash
$ python ejemplo.py
> ejemplo.py(3)factorial() # A partir de la línea 3 dentro de la función factorial
-> if n == 0:
(Pdb) p n  # Muestra valor de n
3
(Pdb) n  # Avanza a siguiente línea
```

------------------------------------------------------------------------

## Consejos para Depuración Efectiva

\

1.  Establece puntos de interrupción estratégicos
2.  Examina el estado de las variables con `p`
3.  Usa `where` para ver la traza de llamadas
4.  Combina con logging para seguimiento
5.  En IPython: `%debug` después de un error

**Alternativas modernas:**

- Depurador de IDEs (VSCode, PyCharm)
- `breakpoint()` en Python 3.7+

------------------------------------------------------------------------

## Resumen Ampliado

\

- **uv** ofrece una alternativa coherente y rápida a `venv`+`pip`, facilitando el uso de Python
- Los **entornos virtuales** son esenciales para manejar dependencias
- **vsCode** ofrece soporte para la integración con entornos virtuales
- **IPykernel** garantiza consistencia con herramientas interactivas de Python dentro de vsCode.
- Aunque es complicado en un principio, el uso de estas herramientas ofrece un flujo profesional que previene muchos problemas comunes

**¡Ahora tienes un entorno profesional para desarrollo en Python!**